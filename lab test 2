1)
data= dt.load_breastcancer().data
df=pd.DataFrame(data)

print(df.head(10))


from sklearn.datasets import load_breast_cancer
import pandas as pd

data = load_breast_cancer()
df = pd.DataFrame(data.data, columns=data.feature_names)
df.head(10)

statistics = df.describe().loc[['mean', 'std', 'min', 'max']]
statistics

missing_values = df.isnull().sum()
missing_values

from sklearn.model_selection import train_test_split
X = df
y = data.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)


scalar = StandardScaler()
X_train_scaled = scalar.fit_transform(X_train)
X_test_scaled = scalar.transform(X_test)

import matplotlib.pyplot as plt

correlation_matrix = df.corr()

plt.figure(figsize=(15, 15))
sns.heatmap(correlation_matrix)
plt.show()
k_values = range(1, 21)
cv_scores = []

for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    scores = cross_val_score(knn, X_train_scaled, y_train, cv=10, scoring='accuracy')
    cv_scores.append(scores.mean())
    
best_k = k_values[np.argmax(cv_scores)]
best_score = max(cv_scores)

print("Best k value:", best_k)
print("Best cross-validated accuracy:", best_score)


from sklearn.metrics import confusion_matrix, classification_report

knn = KNeighborsClassifier(n_neighbors=best_k)
knn.fit(X_train_scaled, y_train)

y_pred = knn.predict(X_test_scaled)

conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print("Confusion Matrix", conf_matrix)
print("Classification Report", class_report)


2)
import numpy as np

def reverse(strings):
 
    arr = np.array(strings)
    result = [s[::-1] for s in arr if len(s[::-1]) >= 5]
    return result

strings = ["kriti", "ravan", "cat", "pet"]
reverse(strings)
